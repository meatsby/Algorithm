출력
    print('Hello', 'World') : string 데이터 사이에 공백을 두고 합쳐서 출력
    print('Hello' + ' World') : '+' 사용 시 string 데이터에 공백을 추가해줘야함
    print('''\
    Hello
    World''') : 줄 바꿔 출력
    print('print("Hello\\nWorld")') : 함수에 영향을 주는 특수문자들은 앞에 '\' 를 더해 출력

입출력, 값변환
    n = int(input()) : 입력받은 문자를 int형으로 변경
    f = float(input()) : 입력받은 문자를 float형으로 변경
    a, b = map(int, input().split()) : split()을 통해 입력받은 문자열을 공백기준으로 배열로 변환
                                       map()을 이용하여 배열의 모든 원소를 첫번째 매개변수로 변환
                                       map()의 return 은 map객체이기 때문에 출력 시 list() 변환
    print(format(a / b, '.2f')) : 소숫점 2자리 반올림
    print(a, end=' ') : 배열 a의 원소를 출력할 때 마다 end 값을 뒤에 붙힌 후 다음 원소 출력
    print(a, b, c sep=' ') : a,b,c 사이에 sep에 해당하는 문자를 추가 후 출력

출력변환
    print(s[0:2]) : 배열 s[0:2]의 0 포함 이상 2 미만 위치의 윈소를 출력
    print('%x' % n) : 원하는 진수로 변환 후 출력 (X, x, d, o, b)
    n = ord(input()) : 문자열에 대응되는 ASCII 코드로 변환
    c = chr(int(input())) : ASCII 코드에 대응되는 문자열로 변환

산술연산자
    print(a + b) : 더하기
    print(a - b) : 빼기
    print(a * b) : 곱하기
    print(a ** b) : 제곱
    print(a // b) : 나눈 몫
    print(a % b) : 나눈 나머지

비교연산자
    print(a < b) : b 가 a 보다 크다
    print(a > b) : b 가 a 보다 작다
    print(a <= b) : b 가 a 보다 크거나 같다
    print(a >= b) : b 가 a 보다 작거나 같다
    print(a == b) : b 와 a 가 같다
    print(a != b) : b 와 a 가 다르다
    
논리연산자
    print(bool(n)) : 0 이면 false 0 이 아니면 true
    print(not n) : n 의 반대 불 값
    print(a and b) : a 와 b 가 모두 true 일 때 true
    print(a or b) : a 와 b 둘 중 하나 이상이 true 일 때 true
    
비트단위논리연산자
    print(~ a) : bitwise NOT
    print(a & b) : bitwise AND
    print(a | b) : bitwise OR
    print(a ^ b) : bitwise XOR
    print(a << 1) : 좌측 비트시프트 2배 / 우측 비트시프트 1/2

3항연산
    "x if C else y"
        C : True 또는 False 를 평가할 조건식(conditional expression) 또는 값
        x : C의 평가 결과가 True 일 때 사용할 값
        y : C의 평가 결과가 True 가 아닐 때 사용할 값

조건/선택실행구조, 반복실행구조
    s += 1 : s = s + 1 이랑 같은 의미
    print(*s) : s 라는 배열을 unpacking 해서 출력
    x, y = map(lambda num: int(num) - 1, s) : s 라는 배열의 원소들을 lambda 함수에 미리
                                              연산한 뒤 새로운 배열에 정의

리스트
    b = [[0 for i in range(19)] for i in range(19)] : b 라는 배열에 19 * 19 matrix 생성
    for i in range(19):
        b.append(list(map(int, input().split()))) : b 라는 배열에 19 * 19 matrix 입력

오버플로우
    파이썬에서 int 형은 4byte 즉 32bit 로 선언됨.
    int 형의 정수 0 은:
        00000000 00000000 00000000 00000000
    int 형의 정수 -1 은:
        11111111 11111111 11111111 11111111
    따라서 int 형으로 선언된 변수는:
        최대 : +2147483647 = 01111111 11111111 11111111 11111111
        최소 : -2147483648 = 10000000 00000000 00000000 00000000
    그렇다면 -2147483648 에서 -1 를 한다면?
        최대값인 +2147483647 이 됨.
    이러한 개념을 overflow, 넘침 이라고 함.
    ~n = -n - 1
    -n = ~n + 1


2021.06.16(수) : 우리밋 뽀개기
2021.06.17(목) : 이코테 뽀개기

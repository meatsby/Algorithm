출력
    print('Hello', 'World') : string 데이터 사이에 공백을 두고 합쳐서 출력
    print('Hello' + ' World') : '+' 사용 시 string 데이터에 공백을 추가해줘야함
    print('''\
    Hello
    World''') : 줄 바꿔 출력
    print('print("Hello\\nWorld")') : 함수에 영향을 주는 특수문자들은 앞에 '\' 를 더해 출력

입출력, 값변환
    n = int(input()) : 입력받은 문자를 int형으로 변경
    f = float(input()) : 입력받은 문자를 float형으로 변경
    a, b = map(int, input().split()) : split()을 통해 입력받은 문자열을 공백기준으로 배열로 변환
                                       map()을 이용하여 배열의 모든 원소를 첫번째 매개변수로 변환
                                       map()의 return 은 map객체이기 때문에 출력 시 list() 변환
    print(format(a / b, '.2f')) : 소숫점 2자리 반올림
    print(a, end=' ') : 배열 a의 원소를 출력할 때 마다 end 값을 뒤에 붙힌 후 다음 원소 출력
    print(a, b, c sep=' ') : a,b,c 사이에 sep에 해당하는 문자를 추가 후 출력

출력변환
    print(s[0:2]) : 배열 s[0:2]의 0 포함 이상 2 미만 위치의 윈소를 출력
    print('%x' % n) : 원하는 진수로 변환 후 출력 (X, x, d, o, b)
    n = ord(input()) : 문자열에 대응되는 ASCII 코드로 변환
    c = chr(int(input())) : ASCII 코드에 대응되는 문자열로 변환

산술연산자
    print(a + b) : 더하기
    print(a - b) : 빼기
    print(a * b) : 곱하기
    print(a ** b) : 제곱
    print(a // b) : 나눈 몫
    print(a % b) : 나눈 나머지

비교연산자
    print(a < b) : b 가 a 보다 크다
    print(a > b) : b 가 a 보다 작다
    print(a <= b) : b 가 a 보다 크거나 같다
    print(a >= b) : b 가 a 보다 작거나 같다
    print(a == b) : b 와 a 가 같다
    print(a != b) : b 와 a 가 다르다
    
논리연산자
    print(bool(n)) : 0 이면 false 0 이 아니면 true
    print(not n) : n 의 반대 불 값
    print(a and b) : a 와 b 가 모두 true 일 때 true
    print(a or b) : a 와 b 둘 중 하나 이상이 true 일 때 true
    
비트단위논리연산자
    print(~ a) : bitwise NOT
    print(a & b) : bitwise AND
    print(a | b) : bitwise OR
    print(a ^ b) : bitwise XOR
    print(a << 1) : 좌측 비트시프트 2배 / 우측 비트시프트 1/2

3항연산
    "x if C else y"
        C : True 또는 False 를 평가할 조건식(conditional expression) 또는 값
        x : C의 평가 결과가 True 일 때 사용할 값
        y : C의 평가 결과가 True 가 아닐 때 사용할 값

조건/선택실행구조, 반복실행구조
    s += 1 : s = s + 1 이랑 같은 의미
    print(*s) : s 라는 배열을 unpacking 해서 출력
    x, y = map(lambda num: int(num) - 1, s) : s 라는 배열의 원소들을 lambda 함수에 미리
                                              연산한 뒤 새로운 배열에 정의

리스트
    b = [[0 for i in range(19)] for i in range(19)] : b 라는 배열에 19 * 19 matrix 생성
    for i in range(19):
        b.append(list(map(int, input().split()))) : b 라는 배열에 19 * 19 matrix 입력

오버플로우
    파이썬에서 int 형은 4byte 즉 32bit 로 선언됨.
    int 형의 정수 0 은:
        00000000 00000000 00000000 00000000
    int 형의 정수 -1 은:
        11111111 11111111 11111111 11111111
    따라서 int 형으로 선언된 변수는:
        최대 : +2147483647 = 01111111 11111111 11111111 11111111
        최소 : -2147483648 = 10000000 00000000 00000000 00000000
    그렇다면 -2147483648 에서 -1 를 한다면?
        최대값인 +2147483647 이 됨.
    이러한 개념을 overflow, 넘침 이라고 함.
    ~n = -n - 1
    -n = ~n + 1

홀수,짝수 구하기
    print(['Even', 'Odd'][n&1])
    홀수 이진수는 항상 1로 끝나기 때문에 1&1 연산시 1이 return 됨.

직사각형 좌표 구하기
    coordinates = [[1,4], [3,4], [3,10]]
    result = []
    result.append(coordinates[0][0] ^ coordinates[1][0] ^ coordinates[2][0])
    result.append(coordinates[0][1] ^ coordinates[1][1] ^ coordinates[2][1])
    XOR 연산을 통해 한가지만 있는 숫자를 추려냄.

컴파일과 인터프리트
    컴파일은 소스코드 모두를 기계어로 번역 후 실행 파일을 만들어 실행하기 때문에 실행속도가 빠름 (번역)
    인터프리트는 소스코드를 동시에 기계어로 번역하면서 실행하기 때문에 속도는 느리나 생산성은 빠름 (통역)
    파이썬은 스크립트 언어이며, 스크립트 언어는 대부분 인터프리터 방식으로 동작하기에 삼항연산이 가능

익명함수 lambda
    함수이름이 존재하지않고 인자와 반환값만 존재함
    
    아래 두 식은 같은 의미
        def funtion_name(x):
            return x+1
        lambda x : x+1
    
    호출 시
        function_name(10) # 11
        (lambda x : x+1)(10) # 11
    
    When to use Lambda?
        map(), filter(), reduce(), sorted() 등에서 사용 가능

filter()
    조건문처럼 쓸 수 있지만 조건문은 아님
    filter(Function, Iterable)

*(Asterisk)
    list 를 unpacking

재귀함수 기초
    반복문 대신 쓴다는 개념

List Comprehension
    리스트 안에 for문과 if문을 사용하여 축약하여 만드는 것을 의미
    a = [i for i in range(10)]
    for문을 만들고 List Comprehension 으로 바꾸는 연습을 해보자

배열과 리스트의 차이
    배열 : 같은 자료형의 데이터들을 하나의 변수로 정의 (int형은 int형만)
           원소 검색 시 배열은 한 번에 접근 가능
           배열의 경우 연속되는 정보들을 메모리에 저장할 때 메모리를 일렬로 저장함
           따라서 제거 혹은 추가 시에 중간 메모리가 비는 현상이 생김으로 여러 정보들을 재배치 해야함
    
    리스트 : 서로 다른 자료형 데이터들도 하나의 변수로 정의 가능 (int, float, string, array)
            리스트는 검색 시 순차적으로 검색해 나가서 접근해야함
            반대로 리스트는 메모리를 random 하게 예약함
            서로 연속되는 정보를 전번이 후번 주소를 기억함으로써 제거 혹은 추가 시에 메모리 효율에 용이함
    
    파이썬에서는 반복되는 객체들을 통틀어 Iterable 이라고 정의했음
    Iterable : List, Tuple, Set, Dictionary, String 등이 있음

배열 개념
    2차원 배열 선언
        array = [[0 for i in range(5)] for i in range(3)]
    C 나 Java 는 배열공간을 선언해주고 시작하는데 (Array)
    Python 은 배열공간을 선언함과 동시에 초기화 (List)
    numpy library 를 이용해서 간편하게 2차원배열 선언 가능 (인공지능, 빅데이터 필수 library)
        import numpy
        
        array = numpy.arange(15).reshape(3,5) # arange 를 통해 15칸을 잡아두고 reshape 으로 2차원
        array = numpy.zeros((3,5)) # 3,5 배열에 0 할당
        array = numpy.ones((3,5)) # 3,5 배열에 1 할당
